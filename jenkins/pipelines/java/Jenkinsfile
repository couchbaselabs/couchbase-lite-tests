pipeline {
    agent none
    parameters {
        choice(name: 'CBL_EDITION', choices: ['enterprise', 'community'], description: 'Couchbase Lite Edition')
        string(name: 'CBL_VERSION', defaultValue: '', description: 'Couchbase Lite Version')
        string(name: 'CBL_BUILD', defaultValue: '', description: 'Couchbase Lite Build Number')
        string(name: 'SGW_URL', defaultValue: '', description: "The url of Sync Gateway to download")
    }
    stages {
        stage('Init') {
            steps {
                script {
                    if (params.CBL_VERSION == '') { error "CBL_VERSION is required" }
                    if (params.CBL_BUILD == '') { error "CBL_BUILD is required" }
                    currentBuild.displayName = "${params.CBL_VERSION}-${params.CBL_BUILD}-${CBL_EDITION} (#${currentBuild.number})"
                }
            }
        }

        // Note that there is no fundamental reason that the Desktop and Web Services
        // builds couldn't run in parallel.  We'd need to figure out how to set
        // up the environment server and sg at alternate ports, probably, and we'd
        // need hardware that can support the load.

        stage('Run Desktop Tests') {
            parallel {
                stage('OSX Tests') {
                    agent { label 'mob-e2e-mac-01' }
                    options {
                        // timeout(time: 60, unit: 'MINUTES')
                        lock("mob-e2e-mac-01")
                    }
                    stages {
                        stage('OSX Desktop Tests') {
                            steps {
                                echo "Run OSX Java Desktop Tests"
                                sh """
                                    jenkins/pipelines/java/desktop/osx_tests.sh "${params.CBL_VERSION}" "${params.CBL_BUILD}" "${params.SGW_URL}"
                                """
                            }
                            post {
                                always {
                                    echo "Teardown OSX Java Desktop Tests"
                                    sh '''
                                        jenkins/pipelines/java/desktop/osx_teardown.sh
                                    '''
                                }
                            }
                        }
                    }
                }
                stage('Windows Tests') {
                    agent { label 'mob-e2e-win-01' }
                    options {
                        // timeout(time: 60, unit: 'MINUTES')
                        lock("mob-e2e-win-01")
                    }
                    stages {
                        stage('Windows Desktop Tests') {
                            steps {
                                echo "Run Windows Java Desktop Tests"
                                pwsh """
                                    jenkins\pipelines\java/desktop\win_tests.ps1 "${params.CBL_VERSION}" "${params.CBL_BUILD}" "${params.SGW_URL}"
                                """
                            }
                            post {
                                always {
                                    echo "Teardown Windows Java Desktop Tests"
                                    pwsh '''
                                        jenkins\pipelines\java/desktop\win_teardown.ps1
                                    '''
                                }
                            }
                        }
                    }
                }
                stage('Linux Tests') {
                    agent { label 'mob-e2e-deb-02' }
                    options {
                        // timeout(time: 60, unit: 'MINUTES')
                        lock("mob-e2e-deb-02")
                    }
                    stages {
                        stage('Linux Desktop Tests') {
                            steps {
                                echo "Run Linux Java Desktop Tests"
                                sh """
                                    jenkins/pipelines/java/desktop/linux_tests.sh "${params.CBL_VERSION}" "${params.CBL_BUILD}" "${params.SGW_URL}"
                                """
                            }
                            post {
                                always {
                                    echo "Teardown Linux Java Desktop Tests"
                                    sh '''
                                        jenkins/pipelines/java/desktop/linux_teardown.sh
                                    '''
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Run Webservices Tests') {
            parallel {
                stage('OSX Tests') {
                    agent { label 'mob-e2e-mac-01' }
                    options {
                        // timeout(time: 120, unit: 'MINUTES')
                        lock("mob-e2e-mac-01")
                    }
                    stages {
                        stage('OSX Web Services Tests') {
                            steps {
                                echo "Run OSX Java Web Services Tests"
                                sh """
                                    jenkins/pipelines/java/webservice/osx_tests.sh "${params.CBL_VERSION}" "${params.CBL_BUILD}" "${params.SGW_URL}"
                                """
                            }
                            post {
                                always {
                                    echo "Teardown OSX Web Services Tests"
                                    sh '''
                                        jenkins/pipelines/java/webservice/osx_teardown.sh
                                    '''
                                }
                            }
                        }
                    }
                }
                stage('Windows Tests') {
                    agent { label 'mob-e2e-win-01' }
                    options {
                        // timeout(time: 120, unit: 'MINUTES')
                        lock("mob-e2e-win-01")
                    }
                    stages {
                        stage('Windows Web Services Tests') {
                            steps {
                                echo "Run Windows Java Web Services Tests"
                                pwsh """
                                    jenkins\pipelines\java\webservice\win_tests.ps1 "${params.CBL_VERSION}" "${params.CBL_BUILD}" "${params.SGW_URL}"
                                """
                            }
                            post {
                                always {
                                    echo "Teardown Windows Web Services Tests"
                                    pwsh '''
                                        jenkins\pipelines\java\webservice\win_teardown.ps1
                                    '''
                                }
                            }
                        }
                    }
                }
                stage('Linux Tests') {
                    agent { label 'mob-e2e-deb-02' }
                    options {
                        // timeout(time: 120, unit: 'MINUTES')
                        lock("mob-e2e-deb-02")
                    }
                    stages {
                        stage('Linux Web Services Tests') {
                            steps {
                                echo "Run Linux Java Web Services Tests"
                                sh """
                                    jenkins/pipelines/java/webservice/linux_tests.sh "${params.CBL_VERSION}" "${params.CBL_BUILD}" "${params.SGW_URL}"
                                """
                            }
                            post {
                                always {
                                    echo "Teardown Linux Web Services Tests"
                                    sh '''
                                        jenkins/pipelines/java/webservice/linux_teardown.sh
                                    '''
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        failure {
            mail bcc: '', body: "Project: <a href='${env.BUILD_URL}'>${env.JOB_NAME}</a> has failed!", cc: '', charset: 'UTF-8', from: 'jenkins@couchbase.com', mimeType: 'text/html', replyTo: 'no-reply@couchbase.com', subject: "${env.JOB_NAME} failed", to: "blake.meike@couchbase.com";
        }
    }
}

