pipeline {
    agent none
    parameters {
        choice(name: 'CBL_EDITION', choices: ['enterprise', 'community'], description: 'Couchbase Lite Edition')
        string(name: 'CBL_VERSION', defaultValue: '3.2.0', description: 'Couchbase Lite Version')
        string(name: 'CBL_BUILD', defaultValue: '', description: 'Couchbase Lite Build Number')
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
    }
    stages {
        stage('Init') {
            steps {
                script {
                    if (params.CBL_VERSION == '') { error "CBL_VERSION is required" }
                    if (params.CBL_BUILD == '') { error "CBL_BUILD is required" }
                    currentBuild.displayName = "${params.CBL_VERSION}-${params.CBL_BUILD}-${CBL_EDITION} (#${currentBuild.number})"
                }
            }
        }
        stage('macOS') {
            agent { label 'mob-e2e-mac-01' }
            steps {
                sh "jenkins/pipelines/c/macos_test.sh ${params.CBL_EDITION} ${params.CBL_VERSION} ${params.CBL_BUILD}"
            }
            post { 
                always { 
                    sh 'jenkins/pipelines/c/macos_teardown.sh'
                }
            }
        }
        stage('iOS') {
            agent { label 'mob-e2e-mac-01' }
            environment { 
                KEYCHAIN_PASSWORD = credentials('mob-e2e-mac-01-keychain-password') 
            }
            steps {
                // Unlock keychain:
                sh 'security unlock-keychain -p ${KEYCHAIN_PASSWORD} ~/Library/Keychains/login.keychain-db'

                // Run tests:
                echo "Run iOS Test"
                sh "jenkins/pipelines/c/ios_test.sh ${params.CBL_EDITION} ${params.CBL_VERSION} ${params.CBL_BUILD}"
            }
            post { 
                always { 
                    echo "Teardown iOS Test"
                    sh 'jenkins/pipelines/c/ios_teardown.sh'
                }
            }
        }
    }
}