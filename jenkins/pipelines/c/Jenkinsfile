pipeline {
    agent none
    parameters {
        choice(name: 'CBL_EDITION', choices: ['enterprise', 'community'], description: 'Couchbase Lite Edition')
        string(name: 'CBL_VERSION', defaultValue: '3.2.0', description: 'Couchbase Lite Version')
        string(name: 'CBL_BUILD', defaultValue: '', description: 'Couchbase Lite Build Number')
        string(name: 'CBL_DATASET_VERSION', defaultValue: '', description: "The dataset version to use (e.g. 3.2 or 4.0)")
        string(name: 'SGW_URL', defaultValue: '', description: "The url of Sync Gateway to download")
    }
    options {
        timeout(time: 60, unit: 'MINUTES')
    }
    stages {
        stage('Init') {
            steps {
                script {
                    if (params.CBL_VERSION == '') { error "CBL_VERSION is required" }
                    if (params.CBL_BUILD == '') { error "CBL_BUILD is required" }
                    if (params.CBL_DATASET_VERSION == '') { error "CBL_DATASET_VERSION is required" }
                    currentBuild.displayName = "${params.CBL_VERSION}-${params.CBL_BUILD}-${CBL_EDITION} (#${currentBuild.number})"
                    currentBuild.description = "Dataset: ${params.CBL_DATASET_VERSION}"
                }
            }
        }
        stage('Run Tests') {
            parallel {
                stage('macOS') {
                    agent { label 'mob-e2e-mac-01' }
                    options {
                        lock('mob-e2e-mac-01')
                        timeout(time: 60, unit: 'MINUTES') 
                    }
                    steps {
                        echo "Run macOS Test"
                        sh "jenkins/pipelines/c/macos_test.sh '${params.CBL_EDITION}' '${params.CBL_VERSION}' '${params.CBL_BUILD}' '${params.CBL_DATASET_VERSION}' '${params.SGW_URL}'"
                    }
                    post { 
                        always { 
                            echo "Teardown macOS Test"
                            sh 'jenkins/pipelines/c/macos_teardown.sh'
                        }
                    }
                }
                stage('iOS') {
                    when {
                        expression { return false } // Skip for now
                    }
                    agent { label 'mob-e2e-mac-01' }
                    options {
                        lock('mob-e2e-mac-01')
                        timeout(time: 60, unit: 'MINUTES') 
                    }
                    environment { 
                        KEYCHAIN_PASSWORD = credentials('mob-e2e-mac-01-keychain-password') 
                    }
                    steps {
                        // Unlock keychain:
                        sh 'security unlock-keychain -p ${KEYCHAIN_PASSWORD} ~/Library/Keychains/login.keychain-db'
                        echo "Run iOS Test"
                        sh "jenkins/pipelines/c/ios_test.sh '${params.CBL_EDITION}' '${params.CBL_VERSION}' '${params.CBL_BUILD}' '${params.CBL_DATASET_VERSION}' '${params.SGW_URL}'"
                    }
                    post { 
                        always { 
                            echo "Teardown iOS Test"
                            sh 'jenkins/pipelines/c/ios_teardown.sh'
                        }
                    }
                }
                stage('linux') {
                    agent { label 'mob-e2e-deb-02' }
                    options {
                        lock('mob-e2e-deb-02')
                        timeout(time: 60, unit: 'MINUTES') 
                    }
                    steps {
                        echo "Run linux Test"
                        sh "jenkins/pipelines/c/linux_test.sh '${params.CBL_EDITION}' '${params.CBL_VERSION}' '${params.CBL_BUILD}' '${params.CBL_DATASET_VERSION}' '${params.SGW_URL}'"
                    }
                    post { 
                        always { 
                            echo "Teardown linux Test"
                            sh 'jenkins/pipelines/c/linux_teardown.sh'
                        }
                    }
                }
                stage('windows') {
                    agent { label 'mob-e2e-win-01' }
                    options {
                        lock('mob-e2e-win-01')
                        timeout(time: 60, unit: 'MINUTES') 
                    }
                    steps {
                        pwsh "jenkins\\pipelines\\c\\wins_test.ps1 -Edition ${params.CBL_EDITION} -Version ${params.CBL_VERSION} -Build ${params.CBL_BUILD} -DatasetVersion ${params.CBL_DATASET_VERSION} -SgwUrl ${params.SGW_URL}"
                    }
                    post { 
                        always { 
                            echo "Teardown Windows Test"
                            pwsh 'jenkins\\pipelines\\c\\wins_teardown.ps1'
                        }
                    }
                }
            }
        }
    }
    post {
        failure {
            mail bcc: '', body: "Project: <a href='${env.BUILD_URL}'>${env.JOB_NAME}</a> has failed!", cc: '', charset: 'UTF-8', from: 'jenkins@couchbase.com', mimeType: 'text/html', replyTo: 'no-reply@couchbase.com', subject: "${env.JOB_NAME} failed", to: "pasin@couchbase.com";
        }
    }
}