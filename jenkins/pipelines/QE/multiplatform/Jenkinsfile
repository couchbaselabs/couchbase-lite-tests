pipeline {
    agent none
    parameters {
        string(
            name: 'PLATFORM_VERSIONS',
            defaultValue: 'ios:3.2.3 android:3.2.4',
            description: 'Platform versions in two supported formats:\n' +
                        '1. Auto-fetch (recommended): platform1:version1 platform2:version2\n' +
                        '   Example: "ios:3.2.3 android:3.2.4"\n' +
                        '2. Explicit builds: platform1:version1:build1 platform2:version2:build2\n' +
                        '   Example: "ios:3.2.3:1 android:3.2.4:2"\n' +
                        'Supported platforms: ios, android, dotnet, java, c'
        )
        string(
            name: 'CBL_DATASET_VERSION',
            defaultValue: '3.2',
            description: 'CBL Dataset Version'
        )
        string(
            name: 'SGW_VERSION',
            defaultValue: '3.2.3',
            description: 'Sync Gateway Version'
        )

        string(
            name: 'PRIVATE_KEY_PATH',
            defaultValue: '~/.ssh/jborden.pem',
            description: 'Path to private key for SSH connections'
        )
        string(
            name: 'CBL_TEST_NAME',
            defaultValue: 'test_no_conflicts::TestNoConflicts::test_multiple_cbls_updates_concurrently_with_pull',
            description: 'Name of the test to run, leave empty to run all tests, or just mention a directory name[::class name] to run tests in that directory[::class]'
        )
        booleanParam(
            name: 'DISABLE_AUTO_FETCH',
            defaultValue: false,
            description: 'Disable automatic fetching of latest successful builds (requires explicit build numbers in PLATFORM_VERSIONS)'
        )
    }
    stages {
        stage('Init') {
            steps {
                script {
                    if (params.PLATFORM_VERSIONS == '') { error "PLATFORM_VERSIONS is required" }
                    if (params.CBL_DATASET_VERSION == '') { error "CBL_DATASET_VERSION is required" }
                    if (params.SGW_VERSION == '') { error "SGW_VERSION is required" }
                    currentBuild.displayName = "${params.PLATFORM_VERSIONS}-${params.SGW_VERSION} (#${currentBuild.number})"
                    currentBuild.description = "Dataset: ${params.CBL_DATASET_VERSION}"
                }
            }
        }
        stage('Validate Parameters') {
            steps {
                script {
                    echo "Platform Versions: ${params.PLATFORM_VERSIONS}"
                    echo "Dataset Version: ${params.CBL_DATASET_VERSION}"
                    echo "SGW Version: ${params.SGW_VERSION}"
                    echo "Auto-fetch builds: ${!params.DISABLE_AUTO_FETCH}"
                    
                    // Validate platform versions format
                    def platformSpecs = params.PLATFORM_VERSIONS.split(' ')
                    platformSpecs.each { spec ->
                        def parts = spec.split(':')
                        if (parts.size() < 2 || parts.size() > 3) {
                            error("Invalid platform specification: ${spec}. Expected format: platform:version[:build]")
                        }
                        if (parts.size() == 2) {
                            echo "Will auto-fetch latest build for ${parts[0]} v${parts[1]}"
                        } else {
                            echo "Will deploy CBL ${parts[1]}-${parts[2]} to ${parts[0]} platform"
                        }
                    }
                }
            }
        }
        stage('Setup and Run Tests') {
            agent { label 'mac-mini-new' }
            environment {
                KEYCHAIN_PASSWORD = credentials('mobile-qe-keychain')
                PATH = "/opt/homebrew/opt/python@3.10/bin:/opt/homebrew/bin:/usr/local/bin:${env.PATH}"
                AWS_PROFILE = "mobile-for-now"
            }
            steps {
                // Unlock keychain:
                sh 'security unlock-keychain -p ${KEYCHAIN_PASSWORD} ~/Library/Keychains/login.keychain-db'
                echo "Run Multiplatform Test"
                timeout(time: 60, unit: 'MINUTES') {
                    sh "jenkins/pipelines/QE/multiplatform/test_multiplatform.sh ${params.PLATFORM_VERSIONS} ${params.CBL_DATASET_VERSION} ${params.SGW_VERSION} ${params.PRIVATE_KEY_PATH} ${params.CBL_TEST_NAME}"
                }
            }
        }
    }
    post {
        failure {
            mail bcc: '', body: "Project: <a href='${env.BUILD_URL}'>${env.JOB_NAME}</a> has failed!", cc: '', charset: 'UTF-8', from: 'jenkins@couchbase.com', mimeType: 'text/html', replyTo: 'no-reply@couchbase.com', subject: "${env.JOB_NAME} failed", to: "vipul.bhardwaj@couchbase.com";
        }
    }
} 