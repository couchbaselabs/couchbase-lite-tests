pipeline {
    agent none
    parameters {
        choice(name: 'CBL_EDITION', choices: ['enterprise', 'community'], description: 'Couchbase Lite Edition')
        string(name: 'CBL_VERSION', defaultValue: '3.2.0', description: 'Couchbase Lite Version')
        string(name: 'CBL_BUILD', defaultValue: '', description: 'Couchbase Lite Build Number')
        string(name: 'CBL_DATASET_VERSION', defaultValue: '3.2', description: 'The version of the Couchbase Lite datasets to use')
        string(name: 'SGW_URL', defaultValue: '', description: "The url of Sync Gateway to download")
    }
    options {
        ansiColor('xterm')
        timestamps()
    }
    stages {
        stage('Init') {
            steps {
                script {
                    if (params.CBL_VERSION == '') { error "CBL_VERSION is required" }
                    if (params.CBL_BUILD == '') { error "CBL_BUILD is required" }
                    if (params.CBL_DATASET_VERSION == '') { error "CBL_DATASET_VERSION is required" }
                    if (params.SGW_URL == '') { error "SGW_URL is required" }
                    currentBuild.displayName = "${params.CBL_VERSION}-${params.CBL_BUILD}-${CBL_EDITION}"
                    currentBuild.description = "Dataset: ${params.CBL_DATASET_VERSION}"
                }
            }
        }
        stage('Desktop') {
            parallel {
                stage("Windows") {
                    agent { label 'mob-e2e-win-01' }
                    options {
                        timeout(time: 60, unit: 'MINUTES') 
                    }
                    environment {
                        PYTHONUTF8=1
                    }
                    steps {
                        pwsh "jenkins\\pipelines\\dotnet\\run_test.ps1 -Version ${params.CBL_VERSION}-${params.CBL_BUILD} -Dataset ${params.CBL_DATASET_VERSION} -SgwUrl ${params.SGW_URL} -PrivateKeyPath C:\\Users\\mob-e\\.ssh\\jborden.pem"
                    }
                    post { 
                        always { 
                            pwsh 'jenkins\\pipelines\\dotnet\\teardown.ps1'
                            archiveArtifacts artifacts: 'tests\\session.log', fingerprint: true
                        }
                    }
                }
                stage("Mac Catalyst") {
                    agent { label 'mob-e2e-mac-01' }
                    options {
                        timeout(time: 60, unit: 'MINUTES') 
                    }
                    environment {
                        KEYCHAIN_PASSWORD = credentials('mob-e2e-mac-01-keychain-password') 
                        DEVELOPER_DIR="/Applications/Xcode.app"
                        MD_APPLE_SDK_ROOT="/Applications/Xcode.app"
                        PYTHONUTF8=1
                    }
                    steps {
                        sh 'security unlock-keychain -p ${KEYCHAIN_PASSWORD} ~/Library/Keychains/login.keychain-db'
                        sh "jenkins/pipelines/dotnet/run_test.sh ${params.CBL_VERSION}-${params.CBL_BUILD} ${params.CBL_DATASET_VERSION} macos '${params.SGW_URL}' ~/.ssh/jborden.pem"
                    }
                    post { 
                        always { 
                            sh 'jenkins/pipelines/dotnet/teardown.sh --topology environment/aws/topology.json'
                            archiveArtifacts artifacts: 'tests/session.log', fingerprint: true
                        }
                    }
                }
            }
        }
        stage('iOS') {
            options {
                lock("mob-e2e-iphone-01")
                timeout(time: 60, unit: 'MINUTES') 
            }
            environment { 
                KEYCHAIN_PASSWORD = credentials('mob-e2e-mac-01-keychain-password') 
                IOS_TEST_SERVER_IP = "10.100.150.123"
                DEVELOPER_DIR="/Applications/Xcode.app"
                MD_APPLE_SDK_ROOT="/Applications/Xcode.app"
                PYTHONUTF8=1
            }
            agent { label 'mob-e2e-mac-01' }
            steps {
                sh 'security unlock-keychain -p ${KEYCHAIN_PASSWORD} ~/Library/Keychains/login.keychain-db'
                sh "jenkins/pipelines/dotnet/run_test.sh ${params.CBL_VERSION}-${params.CBL_BUILD} ${params.CBL_DATASET_VERSION} ios '${params.SGW_URL}' ~/.ssh/jborden.pem"
            }
            post {
                always {
                    sh 'jenkins/pipelines/dotnet/teardown.sh --topology environment/aws/topology.json'
                    archiveArtifacts artifacts: 'tests/session.log', fingerprint: true
                }
            }
        }
        stage('Android') {
            options {
                lock("mob-e2e-android-01")
                timeout(time: 60, unit: 'MINUTES') 
            }
            environment {
                PYTHONUTF8=1
            }
            agent { label 'mob-e2e-mac-01' }
            steps {
                sh "jenkins/pipelines/dotnet/run_test.sh ${params.CBL_VERSION}-${params.CBL_BUILD} ${params.CBL_DATASET_VERSION} android '${params.SGW_URL}' ~/.ssh/jborden.pem"
            }
            post {
                always {
                    sh 'jenkins/pipelines/dotnet/teardown.sh --topology environment/aws/topology.json'
                    archiveArtifacts artifacts: 'tests/session.log', fingerprint: true
                }
            }
        }
    }
    post {
        failure {
            mail bcc: '', body: "Project: <a href='${env.BUILD_URL}'>${env.JOB_NAME}</a> has failed!", cc: '', charset: 'UTF-8', from: 'jenkins@couchbase.com', mimeType: 'text/html', replyTo: 'no-reply@couchbase.com', subject: "${env.JOB_NAME} failed", to: "jim.borden@couchbase.com";
        }
    }
}
