
pipeline {
    agent none
    parameters {
        choice(name: 'CBL_EDITION', choices: ['enterprise', 'community'], description: 'Couchbase Lite Edition')
        string(name: 'CBL_VERSION', defaultValue: '', description: 'Couchbase Lite Version')
        string(name: 'CBL_BUILD', defaultValue: '', description: 'Couchbase Lite Build Number')
        string(name: 'SGW_VERSION', defaultValue: '', description: "The version of Sync Gateway to download")
    }
    stages {
        stage('Init') {
            steps {
                script {
                    if (params.CBL_VERSION == '') { error "CBL_VERSION is required" }
                    if (params.CBL_BUILD == '') { error "CBL_BUILD is required" }
                    if (params.SGW_VERSION == '') { error "SGW_VERSION is required" }
                    currentBuild.displayName = "java-${CBL_EDITION} ${params.CBL_VERSION}-${params.CBL_BUILD} (#${currentBuild.number})"
                }
            }
        }

         stage('Prebuild Servers') {
            steps {
                script {
                    def platforms = [
                        'jak_desktop', 'jak_webservice'
                    ]
                    def parallelBuilds = [:]
                    for(p in platforms) {
                        // Groovy stupidness.  Need to set a local variable here
                        // to avoid late binding (all jobs use dotnet_macos).
                        def platform = p
                        parallelBuilds[platform] = {
                            build job: 'prebuild-test-server',
                            parameters: [
                                string(name: 'TS_PLATFORM', value: platform),
                                string(name: 'CBL_VERSION', value: params.CBL_VERSION),
                                string(name: 'CBL_BUILD', value: params.CBL_BUILD)
                            ],
                            wait: true,
                            propagate: true
                        }
                    }
                    parallel parallelBuilds
                }
            }
        }

        // If Jenkins will actually run things in parallel, we will, at least for now
        // need to use locks to protect platform tests from corrupting each other's back ends.
        // Might as well use them here, for exactly the same purpose.

        stage('Tests') {
            parallel {
                stage('Windows Desktop Test') {
                    agent { label 'mob-e2e-win-01' }
                    options {
                        lock("mob-e2e-win-01")
                    }
                    environment {
                        TS_ARTIFACTS_DIR = 'windows_desktop'
                    }
                    steps {
                        echo "=== Run Windows Desktop Tests"
                        timeout(time: 120, unit: 'MINUTES') {
                            pwsh """  
                                Write-Host "Current user: $env:USERNAME"  
                                Write-Host "User profile: $env:USERPROFILE"  
                                whoami  
                            """
                            pwsh """
                                jenkins\\pipelines\\dev_e2e\\java\\desktop\\run_test.ps1 -Version ${params.CBL_VERSION}-${params.CBL_BUILD} -SgwVersion ${params.SGW_VERSION} -PrivateKeyPath C:\\Users\\mob-e\\.ssh\\jborden.pem
                            """
                        }
                        echo "=== Windows Desktop Tests Complete"
                    }
                    post {
                        always {
                            echo "=== Teardown Windows Desktop Tests"
                            timeout(time: 5, unit: 'MINUTES') {
                                pwsh 'jenkins\\pipelines\\dev_e2e\\java\\desktop\\teardown.ps1'
                            }
                            archiveArtifacts artifacts: 'tests\\dev_e2e\\windows_desktop\\**', fingerprint: true, allowEmptyArchive: true
                            echo "=== Windows Desktop Test Teardown Complete"
                        }
                    }
                }
            }
        }
    }
    post {
        failure {
            mail bcc: '', body: "Project: <a href='${env.BUILD_URL}'>${env.JOB_NAME}</a> has failed!", cc: '', charset: 'UTF-8', from: 'jenkins@couchbase.com', mimeType: 'text/html', replyTo: 'no-reply@couchbase.com', subject: "${env.JOB_NAME} failed", to: "blake.meike@couchbase.com";
        }
    }
}

