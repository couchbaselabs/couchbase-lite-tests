pipeline {
    agent none
    parameters {
        choice(name: 'CBL_EDITION', choices: ['enterprise', 'community'], description: 'Couchbase Lite Edition')
        string(name: 'CBL_VERSION', defaultValue: '3.2.0', description: 'Couchbase Lite Version')
        string(name: 'CBL_BUILD', defaultValue: '', description: 'Couchbase Lite Build Number')
        string(name: 'SGW_VERSION', defaultValue: '', description: "The version of Sync Gateway to download")
    }
    options {
        ansiColor('xterm')
        timestamps()
    }
    stages {
        stage('Init') {
            steps {
                script {
                    if (params.CBL_VERSION == '') { error "CBL_VERSION is required" }
                    if (params.CBL_BUILD == '') { error "CBL_BUILD is required" }
                    if (params.SGW_VERSION == '') { error "SGW_VERSION is required" }
                    currentBuild.displayName = "${params.CBL_VERSION}-${params.CBL_BUILD}"
                    currentBuild.description = "SGW: ${params.SGW_VERSION}"
                }
            }
        }
        stage('Prebuild Servers') {
            steps {
                script {
                    def platforms = [
                        'dotnet_windows', 'dotnet_ios', 'dotnet_android', 'dotnet_macos'
                    ]
                    def parallelBuilds = [:]
                    for(p in platforms) {
                        parallelBuilds[p] = {
                            build job: 'prebuild-test-server',
                            parameters: [
                                string(name: 'PLATFORM', value: p),
                                string(name: 'VERSION', value: params.CBL_VERSION),
                                string(name: 'BLD_NUM', value: params.CBL_BUILD)
                            ],
                            wait: true,
                            propagate: true
                        }
                    }
                    parallel parallelBuilds
                }
            }
        }
        stage('Desktop') {
            parallel {
                stage("Windows") {
                    agent { label 'mob-e2e-win-01' }
                    options {
                        lock("mob-e2e-win-01")
                    }
                    steps {
                        timeout(time: 60, unit: 'MINUTES') {
                            pwsh "jenkins\\pipelines\\dev_e2e\\dotnet\\run_test.ps1 -Version ${params.CBL_VERSION}-${params.CBL_BUILD} -Dataset ${params.CBL_DATASET_VERSION} -SgwVersion ${params.SGW_VERSION} -PrivateKeyPath C:\\Users\\mob-e\\.ssh\\jborden.pem"
                        }
                    }
                    post { 
                        always { 
                            timeout(time: 5, unit: 'MINUTES') {
                                pwsh 'jenkins\\pipelines\\dev_e2e\\dotnet\\teardown.ps1'
                            }
                            archiveArtifacts artifacts: 'tests\\dev_e2e\\session.log', fingerprint: true, allowEmptyArchive: true
                            archiveArtifacts artifacts: 'tests\\dev_e2e\\http_log\\*', fingerprint: true, allowEmptyArchive: true
                        }
                    }
                }
                stage("Mac Catalyst") {
                    agent { label 'mob-e2e-mac-01' }
                    options {
                        lock("mob-e2e-mac-01")
                    }
                    environment {
                        KEYCHAIN_PASSWORD = credentials('mob-e2e-mac-01-keychain-password') 
                        DEVELOPER_DIR="/Applications/Xcode.app"
                        MD_APPLE_SDK_ROOT="/Applications/Xcode.app"
                    }
                    steps {
                        sh 'security unlock-keychain -p ${KEYCHAIN_PASSWORD} ~/Library/Keychains/login.keychain-db'
                        timeout(time: 60, unit: 'MINUTES') {
                            sh "jenkins/pipelines/dev_e2e/dotnet/run_test.sh ${params.CBL_VERSION}-${params.CBL_BUILD} ${params.CBL_DATASET_VERSION} macos '${params.SGW_VERSION}' ~/.ssh/jborden.pem"
                        }
                    }
                    post { 
                        always { 
                            timeout(time: 5, unit: 'MINUTES') {
                                sh 'jenkins/pipelines/dev_e2e/dotnet/teardown.sh'
                            }
                            archiveArtifacts artifacts: 'tests/dev_e2e/session.log', fingerprint: true, allowEmptyArchive: true
                            archiveArtifacts artifacts: 'tests/dev_e2e/http_log/*', fingerprint: true, allowEmptyArchive: true
                        }
                    }
                }
            }
        }
        stage('iOS') {
            options {
                lock("mob-e2e-iphone-01")
            }
            environment { 
                KEYCHAIN_PASSWORD = credentials('mob-e2e-mac-01-keychain-password') 
                DEVELOPER_DIR="/Applications/Xcode.app"
                MD_APPLE_SDK_ROOT="/Applications/Xcode.app"
            }
            agent { label 'mob-e2e-mac-01' }
            steps {
                sh 'security unlock-keychain -p ${KEYCHAIN_PASSWORD} ~/Library/Keychains/login.keychain-db'
                timeout(time: 60, unit: 'MINUTES') {
                    sh "jenkins/pipelines/dev_e2e/dotnet/run_test.sh ${params.CBL_VERSION}-${params.CBL_BUILD} ${params.CBL_DATASET_VERSION} ios '${params.SGW_VERSION}' ~/.ssh/jborden.pem"
                }
            }
            post {
                always {
                    timeout(time: 5, unit: 'MINUTES') {
                        sh 'jenkins/pipelines/dev_e2e/dotnet/teardown.sh'
                    }
                    archiveArtifacts artifacts: 'tests/dev_e2e/session.log', fingerprint: true, allowEmptyArchive: true
                    archiveArtifacts artifacts: 'tests/dev_e2e/http_log/*', fingerprint: true, allowEmptyArchive: true
                }
            }
        }
        stage('Android') {
            options {
                lock("mob-e2e-android-01") 
            }
            agent { label 'mob-e2e-mac-01' }
            steps {
                timeout(time: 60, unit: 'MINUTES') {
                    sh "jenkins/pipelines/dev_e2e/dotnet/run_test.sh ${params.CBL_VERSION}-${params.CBL_BUILD} ${params.CBL_DATASET_VERSION} android '${params.SGW_VERSION}' ~/.ssh/jborden.pem"
                }
            }
            post {
                always {
                    timeout(time: 5, unit: 'MINUTES') {
                        sh 'jenkins/pipelines/dev_e2e/dotnet/teardown.sh'
                    }
                    archiveArtifacts artifacts: 'tests/dev_e2e/session.log', fingerprint: true, allowEmptyArchive: true
                    archiveArtifacts artifacts: 'tests/dev_e2e/http_log/*', fingerprint: true, allowEmptyArchive: true
                }
            }
        }
    }
    post {
        failure {
            mail bcc: '', body: "Project: <a href='${env.BUILD_URL}'>${env.JOB_NAME}</a> has failed!", cc: '', charset: 'UTF-8', from: 'jenkins@couchbase.com', mimeType: 'text/html', replyTo: 'no-reply@couchbase.com', subject: "${env.JOB_NAME} failed", to: "jim.borden@couchbase.com";
        }
    }
}
