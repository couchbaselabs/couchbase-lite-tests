//
// Copyright (c) 2024 Couchbase, Inc. All rights reserved.
//
// Licensed under the Couchbase License Agreement (the "License");
// you may not use this file except in compliance with the License.
// You may review the License at
//     https://www.couchbase.com/enterprise-terms
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs'
}

ext {
    SERVER_VERSION = file("${ROOT_DIR}/version.txt").text.trim()
    SERVER_BUILD  = "${getBuildId()}"

    SPOTBUGS_VERSION = '4.7.3'

    SHARED_DIR = "${ROOT_DIR}/shared"
    ETC_DIR = "${ROOT_DIR}/etc"
    ASSETS_ROOT = "${ROOT_DIR}/../../dataset/server"
    BLOB_ASSETS_DIR = "${ASSETS_ROOT}/blobs"

    REPORTS_DIR = "${buildDir}/reports"

    OKHTTP_VERSION = '4.12.0'
}

def COUCHBASE_LITE_VERSION = project.hasProperty("cblVersion") ? cblVersion : ""
if (!(COUCHBASE_LITE_VERSION =~ /^\d{1,2}\.\d{1,2}\.\d{1,2}-/)) { throw new InvalidUserDataException ("!!! Bad Couchbase version: ${COUCHBASE_LITE_VERSION}") }

// If it is a snapshot, it is in maven local
def USE_LOCAL_MAVEN = COUCHBASE_LITE_VERSION.endsWith("SNAPSHOT")

def DATASET_VERSION = project.hasProperty("datasetVersion") ? datasetVersion : ""
if (!(DATASET_VERSION =~ /^\d{1,2}\.\d{1,2}/)) { throw new InvalidUserDataException ("!!! Bad dataset version: ${DATASET_VERSION}") }
def DB_ASSETS_DIR = "${ASSETS_ROOT}/dbs/${DATASET_VERSION}"

println "Building test server ${SERVER_VERSION}@${SERVER_BUILD} for CBL Android ${COUCHBASE_LITE_VERSION} with ${DATASET_VERSION} data"

android {
    namespace "com.couchbase.lite.android.mobiletest"

    compileSdk COMPILE_SDK_VERSION

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    kotlinOptions { jvmTarget = '1.8' }

    buildFeatures {
        buildConfig = true
        viewBinding = true
    }

    defaultConfig {
        minSdkVersion ANDROID_MIN_SDK
        targetSdkVersion ANDROID_TARGET_SDK

        versionName SERVER_VERSION
        versionCode getVersionCode(SERVER_VERSION)

        multiDexEnabled true

        buildConfigField "String", "SERVER_VERSION", "\"${SERVER_VERSION}@${SERVER_BUILD}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        config {
            keyAlias 'cbl-android-key'
            keyPassword 'couchbase'
            storeFile file('android-key')
            storePassword 'couchbase'
        }
    }

    buildTypes {
        release {
            ndk.debugSymbolLevel 'FULL'

            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.config
        }
    }

    sourceSets {
        main {
            java.srcDirs = [
                "src/main/java/",
                "${SHARED_DIR}/common/main/java",
                "${SHARED_DIR}/server/main/java"
            ]
            assets.srcDirs = [
                DB_ASSETS_DIR,
                BLOB_ASSETS_DIR,
                "${SHARED_DIR}/assets"
            ]
        }
        androidTest {
            java.srcDirs = [
                "${SHARED_DIR}/common/test/java",
                "${projectDir}/src/androidTest/java/"
            ]
        }
    }

    lint {
        abortOnError false
        disable 'UseSparseArrays'
    }
}

repositories {
    if (USE_LOCAL_MAVEN) { mavenLocal() }
    else {
        maven { url 'https://proget.sc.couchbase.com/maven2/internalmaven' }
    }

    // Home of NanoHTTP
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }

    google()
    mavenCentral()
}

configurations.all { resolutionStrategy.cacheChangingModulesFor 1, 'seconds' }
dependencies {
    compileOnly "com.github.spotbugs:spotbugs-annotations:${SPOTBUGS_VERSION}"

    // Dependency injection
    implementation "io.insert-koin:koin-core:3.3.3"
    implementation "io.insert-koin:koin-android:3.3.3"

    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.databinding:databinding-runtime:8.5.2'

    implementation 'com.squareup.moshi:moshi:1.14.0'

    implementation "com.squareup.okhttp3:okhttp:${OKHTTP_VERSION}"

    implementation 'org.nanohttpd:nanohttpd:2.3.2-SNAPSHOT'

    implementation ("com.couchbase.lite:couchbase-lite-android-ee-ktx:${COUCHBASE_LITE_VERSION}") { changing = true }

    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}


def FILE_FILTER = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', '**/gen/**', "okhttp3/**"]

/////// Checkstyle
checkstyle {
    toolVersion = "8.42"
    dependencies {
        checkstyle "com.puppycrawl.tools:checkstyle:${toolVersion}"
        checkstyle "com.github.sevntu-checkstyle:sevntu-checks:1.39.0"
        checkstyle fileTree(dir: "${ETC_DIR}/checkstyle", include: ['kotlin-checks-0.9.jar'])
    }

    configFile file("${ETC_DIR}/checkstyle/checkstyle.xml")
    configProperties = ['configDir': file("${ETC_DIR}/checkstyle")]

    showViolations true
}
task checkstyle(type: Checkstyle) {
    description 'Checkstyle'
    group 'verification'

    source android.sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude FILE_FILTER

    classpath = files()

    reports {
        xml {
            required = true
            outputLocation = file("${REPORTS_DIR}/checkstyle.xml")
        }
        html {
            required = true
            outputLocation = file("${REPORTS_DIR}/checkstyle.html")
        }
    }
}

/////// PMD
pmd {
    toolVersion '6.26.0'
    ruleSets = []
}
task pmd(type: Pmd) {
    description 'PMD'
    group 'verification'

    ruleSetFiles = files("${ETC_DIR}/pmd/pmd.xml")

    source = android.sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude FILE_FILTER

    reports {
        xml {
            required = true
            setDestination(file("${REPORTS_DIR}/pmd.xml"))
        }
        html {
            required = true
            setDestination(file("${REPORTS_DIR}/pmd.html"))
        }
    }
}

/////// SpotBugs
// If SpotBug is run on code generated with Java 11
// it will generate quite a few extraneous NULLCHECK warnings.
// Sadly the problem is Java 11 code generation: the only solution
// is to disable the check.
spotbugs { toolVersion = SPOTBUGS_VERSION }
['Html', 'Xml'].each { reportType ->
    task("spotbugs${reportType}", type: com.github.spotbugs.snom.SpotBugsTask) {
        description "Spotbugs with ${reportType} report"
        group 'verification'

        afterEvaluate { dependsOn compileDebugKotlin, compileReleaseKotlin, compileDebugJavaWithJavac }

        effort = "max"
        reportLevel = "medium"
        ignoreFailures = false

        sourceDirs = project.files(android.sourceSets.main.java.srcDirs)

        classDirs = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes")

        android.getBootClasspath().each { dir -> auxClassPaths += project.files(dir) }
        afterEvaluate {
            android.applicationVariants.collect { variant ->
                auxClassPaths += project.files(variant.javaCompileProvider.get().classpath.files)
            }
        }

        excludeFilter = file("${ETC_DIR}/spotbugs/spotbugs.xml")
        onlyAnalyze = ['com.couchbase.lite.-']

        reports {
            xml {
                required = (reportType == "Xml")
                setDestination(file("${REPORTS_DIR}/spotbugs.xml"))
            }
            html {
                required = (reportType == "Html")
                setDestination(file("${REPORTS_DIR}/spotbugs.html"))
            }
        }
    }
}

task smokeTest(dependsOn: ['clean', 'compileDebugSources', 'checkstyle', 'lint', 'pmd', 'spotbugsHtml'])


// ----------------------------------------------------------------
// Extensions
// ----------------------------------------------------------------
def getVersionCode(version) {
    int code = 0
    for (v in version.split("\\.")) { code = (code * 10) + v.toInteger() }
    return code
}

def getBuildId() {
    def hostname = "rogue"
    try { hostname = "hostname".execute().text.trim() }
    catch (Exception ignore) { }

    return "${getCommit().substring(0, 10)} on ${hostname}"
}

def getCommit() {
    def commit = "unofficial"
    try { commit = "git rev-parse HEAD".execute().text.trim() }
    catch (Exception ignore) { }
    return commit
}

