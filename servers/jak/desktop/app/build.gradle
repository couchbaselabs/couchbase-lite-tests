import com.github.spotbugs.snom.SpotBugsTask
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'kotlin'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs'
}

ext {
    SERVER_VERSION = file("${ROOT_DIR}/version.txt").text.trim()
    SERVER_BUILD = "${getBuildId()}"
    SERVER_ID = "Java Desktop Test Server ${SERVER_VERSION}@${SERVER_BUILD}"

    CBL_VERSION = file("${ROOT_DIR}/cbl-version.txt").text.trim()
    CBL_BUILD_NUMBER = (project.hasProperty("buildNumber") && buildNumber) ? buildNumber : "SNAPSHOT"
    COUCHBASE_LITE_VERSION = "${CBL_VERSION}-${CBL_BUILD_NUMBER}"

    SPOTBUGS_VERSION = '4.7.3'

    ASSETS_DIR = "${ROOT_DIR}/../../dataset/server"
    SHARED_DIR = "${ROOT_DIR}/shared"
    ETC_DIR = "${ROOT_DIR}/etc"

    REPORTS_DIR = "${buildDir}/reports"

    OKHTTP_VERSION = '4.12.0'
}

// Set -Pverbose to get full console logs for tests
def VERBOSE = project.hasProperty("verbose")

// Set true to use mavenLocal instead of Proget
def USE_LOCAL_MAVEN = project.hasProperty("useLocalMaven")

def COUCHBASE_LITE_LIB = 'couchbase-lite-java-ee'
if (USE_LOCAL_MAVEN) { COUCHBASE_LITE_LIB += "-macos" }

group 'com.couchbase.lite.mobiletest'
version = SERVER_VERSION

java {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"

    sourceSets {
        main {
            java.srcDirs = [
                "src/main/java/",
                "${buildDir}/generated/sources/java",
                "${SHARED_DIR}/common/main/java",
                "${SHARED_DIR}/jvm/main/java",
                "${SHARED_DIR}/server/main/java"
            ]
            resources.srcDirs = [
                ASSETS_DIR,
                "${SHARED_DIR}/assets"
            ]
        }
        test {
            java.srcDirs = [
                "${SHARED_DIR}/common/test/java",
                "${projectDir}/src/test/java/"
            ]
        }
    }
}

compileKotlin.kotlinOptions.jvmTarget = "1.8"
compileTestKotlin.kotlinOptions.jvmTarget = "1.8"

jar {
    archiveBaseName = "CBLTestServer-Java"
    archiveAppendix = "Desktop"
    archiveVersion = COUCHBASE_LITE_VERSION

    manifest { attributes('Main-Class': 'com.couchbase.lite.javadesktop.mobiletest.TestServerApp') }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/**"
    }
}

repositories {
    if (USE_LOCAL_MAVEN) { mavenLocal() }
    else {
        maven { url 'https://proget.sc.couchbase.com/maven2/internalmaven/' }
    }

    // Home of NanoHTTP
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }

    google()
    mavenCentral()
}

dependencies {
    compileOnly 'androidx.annotation:annotation:1.5.0'
    compileOnly "com.github.spotbugs:spotbugs-annotations:${SPOTBUGS_VERSION}"

    implementation 'commons-daemon:commons-daemon:1.2.2'

    implementation 'com.squareup.moshi:moshi:1.14.0'

    implementation "com.squareup.okhttp3:okhttp:${OKHTTP_VERSION}"

    implementation 'org.nanohttpd:nanohttpd:2.3.2-SNAPSHOT'

    implementation "com.couchbase.lite:${COUCHBASE_LITE_LIB}:${COUCHBASE_LITE_VERSION}"

    testImplementation 'junit:junit:4.13.2'
}

// Copy the version template into the source, inserting build info
task generateServerInfo(type: Copy) {
    outputs.upToDateWhen { false }
    from("${SHARED_DIR}/jvm/templates/TestServerInfo.java") {
        filter(ReplaceTokens, tokens: [VERSION: SERVER_ID.toString()])
    }
    into "${buildDir}/generated/sources/java/com/couchbase/lite/mobiletest"
}
project.afterEvaluate {
    compileJava.dependsOn generateServerInfo
    compileKotlin.dependsOn generateServerInfo
}

def FILE_FILTER = ['**/gen/**', "okhttp3/**", "org/json/**"]

/////// Checkstyle
checkstyle {
    toolVersion = "8.42"
    dependencies {
        checkstyle "com.puppycrawl.tools:checkstyle:${toolVersion}"
        checkstyle "com.github.sevntu-checkstyle:sevntu-checks:1.39.0"
        checkstyle fileTree(dir: "${ETC_DIR}/checkstyle", include: ['kotlin-checks-0.9.jar'])
    }

    configFile = file("${ETC_DIR}/checkstyle/checkstyle.xml")
    configProperties = ['configDir': file("${ETC_DIR}/checkstyle")]

    showViolations true
}
task checkstyle(type: Checkstyle, dependsOn: generateServerInfo) {
    description 'Checkstyle'
    group 'verification'

    source sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude FILE_FILTER

    classpath = files()

    reports {
        xml {
            required = true
            setDestination(file("${REPORTS_DIR}/checkstyle.xml"))
        }
        html {
            required = true
            setDestination(file("${REPORTS_DIR}/checkstyle.html"))
        }
    }
}

/////// PMD
pmd {
    toolVersion '6.26.0'
    ruleSets = []
}
task pmd(type: Pmd, dependsOn: generateServerInfo) {
    description 'PMD'
    group 'verification'

    ruleSetFiles = files("${ETC_DIR}/pmd/pmd.xml")

    source = sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude FILE_FILTER

    reports {
        xml {
            required = true
            setDestination(file("${REPORTS_DIR}/pmd.xml"))
        }
        html {
            required = true
            setDestination(file("${REPORTS_DIR}/pmd.html"))
        }
    }
}

/////// SpotBugs
// If SpotBug is run on code generated with Java 11
// it will generate quite a few extraneous NULLCHECK warnings.
// Sadly the problem is Java 11 code generation: the only solution
// is to disable the check.
spotbugs { toolVersion = SPOTBUGS_VERSION }
['Html', 'Xml'].each { reportType ->
    task("spotbugs${reportType}", type: SpotBugsTask, dependsOn: generateServerInfo) {
        description "Spotbugs with ${reportType} report"
        group 'verification'

        dependsOn compileJava, processResources

        effort = "max"
        reportLevel = "medium"
        ignoreFailures = false

        sourceDirs = project.files(sourceSets.main.java.srcDirs)

        classDirs = fileTree(dir: "${buildDir}/classes/java/main")

        tasks.withType(JavaCompile).each { task -> auxClassPaths.from(task.classpath) }

        excludeFilter = file("${ETC_DIR}/spotbugs/spotbugs.xml")
        onlyAnalyze = ['com.couchbase.lite.-']

        reports {
            xml {
                required = (reportType == "Xml")
                setDestination(file("${REPORTS_DIR}/spotbugs.xml"))
            }
            html {
                required = (reportType == "Html")
                setDestination(file("${REPORTS_DIR}/spotbugs.html"))
            }
        }
    }
}

test {
    testLogging {
        outputs.upToDateWhen { false }

        events = ["failed", "skipped"]

        showStandardStreams = VERBOSE

        showCauses = true
        showExceptions = true
        showStackTraces = true
        exceptionFormat = 'full'
    }
}

task smokeTest(dependsOn: ['clean', 'compileJava', 'checkstyle', 'pmd', 'spotbugsHtml', 'testClasses'])

// ----------------------------------------------------------------
// Extensions
// ----------------------------------------------------------------
def getVersionCode(version) {
    int code = 0
    for (v in version.split("\\.")) { code = (code * 10) + v.toInteger() }
    return code
}

def getBuildId() {
    try {
        def hostname = "hostname".execute().text.trim()
        return "${getCommit().substring(0, 10)} on ${hostname}"
    }
    catch (Exception ignore) {}
    return "rogue"
}

def getCommit() {
    try { return "git rev-parse HEAD".execute().text.trim() }
    catch (Exception ignore) {}
    return "unofficial"
}
