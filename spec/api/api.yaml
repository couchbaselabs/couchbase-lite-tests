openapi: 3.0.3
info:
  title: Couchbase Lite Test Server API
  description: |-
    This is a REST API specification for Couchbase Lite Test Server.

    The APIs except GET '/' requires the following request headers:
    * CBLTest-API-Version (integer)
    * CBLTest-Client-ID (UUID)

    The response headers of all APIs will contains the following response headers:
    * CBLTest-API-Version (integer)
    * CBLTest-Server-ID (UUID)

    Enum values:
    * Any enum values in the spec are case insensitive.

    KeyPath:
    * The /updateDatabase and /verifyDocuments API are using the JSON's keypath to
      refer to a specific path in the document's properties tree.
    * The keypath structure can be described as follows:

      keypath  ::= ( [ DOLLAR DOT ] <property> | <index> ) <path>
      path     ::= (DOT <property> | <index>)* EOP
      index    ::= OBRACKET DIGIT+ CBRACKET
      property ::= ANY+
      EOP      ::= End of path
      DOT      ::= '.'
      DOLLAR   ::= '$'
      OBRACKET ::= '['
      CBRACKET ::= ']'
      DIGIT    ::=  '0' |'1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
      ANY      ::= (! (DOT | OBRACKET | CBRACKET | EOP) ) | ESCAPE
      ESCAPE   ::= '\' (! EOP )

    Changes

    0.1.7
    * Fixed missing database in snapshotDocuments request
    * Added required keys to snapshotDocuments request
    * Add 'description' key to the verifyDocuments response

    0.1.6
    * Added JSON Path Spec to /updateDatabase

    0.1.5
    * Changed /updateDatabase to use keypaths for specifying the changes
    
    0.1.4
    * Fixed required fields and update description in ServerInfo.
    * Added additionalInfo to the ServerInfo.
    * Fixed required fields in ReplicationCollection.
    * Changed DocumentReplication.flags type from int to array of enums.
    * Added 'enableDocumentListener' to ReplicatorConfiguration.
    * Added a note that any enum values are case insensitive.
  version: 0.1.7
tags:
  - name: API
paths:
  /:
    get:
      tags:
        - API
      summary: Get Test Server information
      description: |- 
        Get Test Server information containing the following information (tentative):

        * version : Test Server version number which is the same as CBL release number.
        * apiVersion: API version number. This will increase when we have breaking change.
        * cbl: The name of the CBL library used.
        * device : Device or platform information that the test server is running on.
        * additionalInfo: Any additional info regarding the server.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfo'
        '400':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /reset:
    post:
      tags:
        - API
      summary: Reset the test server
      description: |- 
        Reset the test server by deleting all of the databases and re-creating new databases with prebuilt datasets if specified. 
      operationId: reset
      requestBody:
        description: |- 
          The request object describes how the databases will be setup after being reset. The properties include:

          * **datasets** (Optional) : the datasets which are prebuilt databases to be copied as the specified database names.
            The data structure is a JSON dictionary where the keys are the dataset names and the values are an array of the
            database names. Without specified, no databases will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetConfiguration'
        required: true
      responses:
        '200':
          description: Success
        '400':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /getAllDocuments:
    post:
      tags:
        - API
      summary: Get all documents
      description: Get info including of document IDs and revision IDs all document from the specified collections
      operationId: getAllDocuments
      requestBody:
        description: |- 
          The request object provides a list of the collections in the specified database. The properties include: 

          * **database** : The database name
          * **collections** : An array of the collection names. The collection name is in the <scope-name>.<collection-name> format.

          If the specified database is not found, the 400 error will be returned.

          If the specified collections are not found, the response will not included the collections in its body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collections'
        required: true
      responses:
        '200':
          description: |- 
            Success

            The response body is an object where key is the collection name and the value is an array of objects containing document info including two keys, 'id' (documentID) and rev (revisionID).

            If the specified collections in the request, the dictionary will not contain those collections.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/CollectionDocuments'
        '400':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /updateDatabase:
    post:
      tags:
        - API
      summary: Update documents in the database.
      description: |-
        Perform document updates in batch. The request body contains an array of DatabaseUpdateItem object which describes 
        how documents are updated, deleted or purged. For updating a document, the changes to the document are specified 
        in 'updatedProperties' and 'removedProperties'.

        updatedProperties:

        An array of objects. Each object contains one or more keys that are key paths into the document to be updated with the 
        values associated with the keys. The objects in the array are evaluated in their natural order.

        The keypath identifies a unique location in the document's property tree starting from the root that follows 
        dictionary properties and array elements. The keypath looks like "foo.bar[1].baz". The keypath structure can be found
        in the description at the beginning of this specification.

        The value at the location specified by the keypath is replaced with the value associated with the keypath, in the object 
        regardless of its type. When a path in the keypath refers to a non-existent property, the key is added and 
        its value set as a dictionary or an array depending on the type of the path.

        When a path in the keypath includes an array index that is out of bounds (the array is smaller than the specified index), the array 
        is padded with nulls until it is exactly large enough to make the specified index legal.  
        
        When a path (dictionary or array) in the keypath doesn't match the actual value type, the error will be returned.
        
        Examples,

        Document:
        { 
          "name", {"first": "John", "last": "Doe"}, 
          "addresses": [{"city": "San Francisco"}, {"city": "Palo Alto"}]
        }

        Updates:

        name.last = "Tiger" -> {"name", {"first": "John", "last": "Tiger"}, ...}
        name.middle = "Sky" -> {"name", {"first": "John", "middle": "sky", "last": "Tiger"}, ...}
        name = "John Doe" -> {"name", "John Doe"}

        name.first.value = "John" ->  Error as the value of "first" is not the dictionary

        addresses[0].city = "Santa Clara" -> {"addresses": [{"city": "Santa Clara"}, {"city": "Palo Alto"}], ...}
        addresses[4].city = "San Mateo" -> {"addresses": [{"city": "Santa Clara"}, {"city": "Palo Alto"}, null, {"city": "San Mateo"}], ...}
        phones[1] = "650-123-4567" -> {"phones": [null, "650-123-4567"]}
        
        removedProperties:

        An array of the key paths which refer to ditionary keys or array elements to be removed. If a keypath refer to a non-existent
        property or array element, the remove for the keypath will be no-ops. When removing multiple items in an array, the order of the array indexes 
        should be from high to low to avoid index mutation during the removal.
        
      operationId: updateDatabase
      requestBody:
        description: |-
          The request object containing document update items that will be performed in batch.
        content:
          application/json:
            schema:
              type: object
              required: ['database', 'updates']
              properties:
                database:
                  type: string
                  example: 'db1'
                updates:
                  type: array
                  items:
                    $ref: '#/components/schemas/DatabaseUpdateItem'
        required: true
      responses:
        '200':
          description: Success
        '400':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /startReplicator:
    post:
      tags:
        - API
      summary: Create and start a replicator
      description: |- 
        Create and start a replicator. If success, the created replicator identifier will be returned.
      operationId: startReplicator
      requestBody:
        description: |- 
          The request object containing the replicator configuration and the reset checkpoint flag 
          used when starting the replicator.

          Note: TESTSERVER/400 error returned when no collections set in the specified collection
        content:
          application/json:
            schema:
              type: object
              required: ['config']
              properties:
                config:
                  $ref: '#/components/schemas/ReplicatorConfiguration'
                reset:
                  type: boolean
                  example: false
        required: true
      responses:
        '200':
          description: |- 
            Success

            The response body is an object containing the replicator object identifier.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Replicator'
        '400':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /getReplicatorStatus:
    post:
      tags:
        - API
      summary: Get the current status of the replicator
      description: Get the current status of the replicator.
      operationId: getReplicatorStatus
      requestBody:
        description: |- 
          The request object containing the replicator identifier.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Replicator'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicatorStatus'
        '400':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /snapshotDocuments:
    post:
      tags:
        - API
      summary: Snapshot documents for verifying changes
      description: |- 
        Given a list of document IDs, snapshot the documents by getting and saving the documents in the memory. For the non-existing or deleted documents, the documents will be recorded as null.
        
        The API will return a UUID of the snapshot, which can be used when calling POST /verifyDocuments requests to verify changes in the local database after finishing replication. 
      operationId: snapshotDocuments
      requestBody:
        description: |-
          The request object containing the IDs of the documents to be snapshotted.
        content:
          application/json:
            schema:
              type: object
              required: ['database', 'documents']
              properties:
                database:
                  type: string
                  example: 'db1'
                documents:
                  type: array
                  items:
                    $ref: '#/components/schemas/DocumentID'
        required: true
      responses:
        '200':
          description: |- 
            Success

            The response body is an object containing the snapshot identifier.
          content:
            application/json:
              schema: 
                type: object
                required: ['id']
                properties:
                  id: 
                    type: string
                    format: uuid
                    example: '123e0000-e89b-12d3-a456-426614174000'
        '400':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /verifyDocuments:
    post:
      tags:
        - API
      summary: Verify document changes from a document snapshot.
      description: |- 
        Verify document changes from a document snapshot. The request body contains an array of changes to be verified.
      operationId: verifyDocuments
      requestBody:
        description: Verify document changes from the given document snapshot recorded by using POST /snapshotDocuments.
        content:
          application/json:
            schema: 
              type: object
              required: ['database', 'snapshot', 'changes']
              properties:
                database:
                  type: string
                  example: 'db1'
                snapshot:
                  type: string
                  format: uuid
                  example: '123e0000-e89b-12d3-a456-426614174000'
                changes:
                  type: array
                  items:
                    $ref: '#/components/schemas/DatabaseUpdateItem'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: 
                type: object
                required: ['result']
                properties:
                  result: 
                    type: boolean
                    example: false
                  description:
                    description: 'Additional info describing the result'
                    type: string
                    example: "Document 'scope.collection.doc1' was not deleted."
        '400':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
components:
  schemas:
    Collections:
      type: object
      required: ['database', 'collections']
      properties:
        database:
          type: string
          example: 'db1'
        collections:
          type: array
          items:
            type: string
          example: ['catalog.cloths', 'catalog.shoes']
    CollectionDocuments:
      type: object
      additionalProperties:
        type: string
      example: { 'catalog.cloths': [{'id': 'c1', 'rev': '1-abc'}, {'id': 'c2', 'rev': '1-9ef'}], 
                 'catalog.shoes': [{'id': 's1', 'rev': '1-ff0'}, {'id': 's2', 'rev': '1-e0f'}]}
    DocumentID:
      type: object
      required: ['collection', 'id']
      properties:
        collection:
          type: string
          example: 'store.cloths'
        id:
          type: string
          example: 'doc1'
    DocumentReplication:
      type: object
      required: ['collection', 'documentID', 'isPush']
      properties:
        collection:
          type: string
          example: 'store.cloths'
        documentID:
          type: string
          example: 'doc1'
        isPush: 
          type: boolean
          example: true
        flags: 
          type: array
          items:
            type: string
            enum: [deleted, accessRemoved]
            example: ['deleted']
        error:
          $ref: '#/components/schemas/Error'
    DatabaseUpdateItem:
      type: object
      required: ['type', 'collection', 'documentID']
      properties:
        type: 
          type: string
          enum: ['UPDATE', 'DELETE', 'PURGE']
          example: 'UPDATE'
        collection:
          type: string
          example: 'store.cloths'
        documentID:
          type: string
          example: 'doc1'
        updatedProperties:
          type: array
          items:
            type: object
            additionalProperties: { }
            example: [
              {'people[47].address': {'street': 'Oak St. ', 'city': 'Auburn'} },
              {'people[3].address': {'street': 'Elm St. ', 'city': 'Sibley'} }
            ]
        removedProperties:
          type: array
          items:
            type: string
            example: [ 'people[22].address', 'people[3]' ]
    Error:
      type: object
      required: ['domain', 'code']
      properties:
        domain:
          type: string
          enum: [TESTSERVER, CBL, POSIX, SQLITE, FLEECE]
          example: 'TESTSERVER'
        code: 
          type: integer
          format: int32
          example: 1
        message: 
          type: string
          example: 'This is an error'
    Replicator:
      type: object
      required: ['id']
      properties:
        id: 
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
    ReplicatorBasicAuthenticator:
      type: object
      required: ['type', 'username', 'password']
      properties:
        'type':
          type: string
          enum: ['BASIC']
        username:
          type: string
          example: 'user1'
        password:
          type: string
          example: 'p@ssw0rd'
    ReplicatorSessionAuthenticator:
      type: object
      required: ['type', 'sessionID']
      properties:
        'type':
          type: string
          enum: ['SESSION']
        sessionID:
          type: string
          example: 'SG12345'
        cookieName:
          type: string
          example: 'sessionID'
    ReplicatorConfiguration:
      type: object
      required: ['database', 'collections', 'endpoint']
      properties:
        database:
          type: string
          example: 'db1'
        collections:
          type: array
          items:
            $ref: '#/components/schemas/ReplicationCollection'
        endpoint:
          type: string
          example: "wss://localhost:4985/db"
        replicatorType:
          type: string
          enum:
            - pushAndPull
            - push
            - pull
          example: pushAndPull
        continuous:
          type: boolean
          example: true
        authenticator:
          oneOf:
            - $ref: '#/components/schemas/ReplicatorBasicAuthenticator'
            - $ref: '#/components/schemas/ReplicatorSessionAuthenticator'
        enableDocumentListener:
          description: 'When enable the document listener, the ReplicatorStatus will include the documents containing a list of DocumentReplication. The default is false.'
          type: boolean
          example: false
    ReplicationCollection:
      type: object
      required: ['names']
      properties:
        names: 
          type: array
          items:
            type: string
          example: ['store.cloths', 'store.shoes']
        channels:
          type: array
          items:
            type: string
          example: ['A', 'B']
        documentIDs:
          type: array
          items:
            type: string
          example: ['doc1', 'doc2']
        pushFilter:
          $ref: '#/components/schemas/ReplicationFilter'
    ReplicationFilter:
      type: object
      required: ['name']
      properties:
        name:
          type: string
          example: 'documentIDs'
        params:
          type: object
          additionalProperties: { }
          example: { 'documentIDs': ['doc1', 'doc2'] }
    ReplicatorStatus:
      type: object
      required: ['activity', 'progress']
      properties:
        activity: 
          type: string
          enum: ['STOPPED', 'OFFLINE', 'CONNECTING', 'IDLE', 'BUSY']
        progress:
          type: object
          required: ['completed']
          properties:
            completed:
              type: boolean
              example: true
        documents:
          description: |- 
            'This will include only when enableDocumentListener is set to true in ReplicatorConfiguration when calling /startReplicator. 
             The returned documents will be deleted after the documents are returned so the subsequnce call to get the replicator status 
             will not contain the previous returned documents.'
          type: array
          items:
            $ref: '#/components/schemas/DocumentReplication'
        error:
          $ref: '#/components/schemas/Error'
    ResetConfiguration:
      type: object
      properties:
        datasets:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example: { 'catalog': ['db1', 'db2'] }
    ServerInfo:
      type: object
      required: ['version', 'apiVersion', 'cbl', 'device']
      properties:
        version:
          description: 'Server version which is the same as CBL version.'
          type: string
          example: "3.1.0"
        apiVersion:
          description: 'API version number. This will increase when we have breaking changes.'
          type: integer
          example: 1
        cbl:
          description: 'The name of the CBL library used.'
          type: string
          example: "couchbase-lite-android"
        device:
          description: 'Device or platform information that the test server is running on.'
          type: object
          required: ['systemName', 'systemVersion']
          properties:
            model:
              description: 'Device Model Name'
              type: string
              example: 'Android Nexus X'
            systemName:
              description: 'Operating System Name'
              type: string
              example: 'Android OS Name'
            systemVersion:  
              description: 'Operating System Version'
              type: string
              example: '6.0.0'
            systemApiVersion:  
              description: 'Operating System API Version'
              type: string
              example: '19'
        additionalInfo:
          description: 'Any additional info regarding the server'
          type: string
          example: "CBL Commit 61671d0"
  responses:
    Error:
      description: |- 
        HTTP Status:
          * 400 : Client request error (e.g. protocol error or JSON request body error) or CouchbaseLite error or exception.
          * 500 : Server error
        
        Response body: JSON object including domain, code, and message.
          * CouchbaseLite error: The domain (CBL,POSIX,SQLITE,FLEECE) and the code will be from CouchbaseLite error. 
          * Non CouchbaseLite error:  The domain will be TESTSERVER and the code will be the same as the status code.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'